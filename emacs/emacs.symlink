;; -*- emacs-lisp -*-
(defvar global-minor-modes nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-browser-function 'browse-url-default-macosx-browser)
 '(c-basic-offset 4)
 '(canlock-password "cddc0659a73575278ba7e32ae9b8520ebf5162e8")
 '(column-number-mode t)
 '(custom-enabled-themes '(tango-dark))
 '(default-frame-alist '((width . 160) (height . 96)))
 '(erc-fill-column 120)
 '(footnote-body-tag-spacing 1)
 '(footnote-spaced-footnotes nil)
 '(frame-background-mode nil)
 '(fringe-mode 0 nil (fringe))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(lsp-ui-sideline-show-hover 'y)
 '(mouse-wheel-scroll-amount '(1 ((shift) . hscroll) ((meta))))
 '(nxml-slash-auto-complete-flag t)
 '(org-babel-load-languages
   '((sqlite . t)
     (sql . t)
     (makefile . t)
     (plantuml . t)
     (perl . t)
     (perl6 . t)
     (raku . t)
     (emacs-lisp . t)
     (C . t)
     (css . t)
     (dot . t)
     (java . t)
     (js . t)
     (restclient . t)
     (python . t)
     (shell . t)
     (go . t)
     (vega . t)
     (kgt . t)
     (http . t)
     (rust . t)))
 '(org-confirm-babel-evaluate nil)
 '(org-plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar")
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation t)
 '(org-startup-folded nil)
 '(org-support-shift-select t)
 '(package-selected-packages
   '(ob-rust graphviz-dot-mode org-roam-ui ob-http marginalia lsp-java lsp-pyright dap-mode lsp-ui ccls plantuml-mode ob-async org-cliplink shx lsp-mode rustic ob-go jupyter org-roam transient tablist json-mode cpputils-cmake cmake-mode cmake-project company flycheck cmake-ide rfc-mode f tide wsd-mode jq-mode yasnippet ansible diff-hl sicp raku-mode ack htmlize ox-gfm pcre2el visual-regexp-steroids groovy-mode pandoc-mode auctex dockerfile-mode go-mode restclient markdown-mode web-mode magit yaml-mode perl6-mode))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(split-height-threshold 60)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(visible-bell t)
 '(warning-suppress-types '((comp) (org)))
 '(wsd-style "qsd"))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:weight normal :height 120 :family "SF Mono"))))
 '(diff-hl-change ((t (:background "blue" :foreground "yellow"))))
 '(diff-hl-delete ((t (:inherit diff-removed :foreground "red" :weight bold))))
 '(diff-hl-insert ((t (:inherit diff-added :foreground "green"))))
 '(fixed-pitch ((t (:family "SF Mono")))))

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
;(package-initialize)

;; Keys
(setq mac-command-modifier 'meta)
(setq mac-right-command-modifier 'super)
(setq mac-option-modifier nil)
(setq mac-right-option-modifier 'alt)
(global-set-key [(meta h)] 'ns-do-hide-emacs)
(global-set-key [(meta \`)] 'other-frame)
(global-set-key [wheel-left] 'ignore)
(global-set-key [wheel-right] 'ignore)
(global-set-key (kbd "C-x /") 'point-to-register)
(global-set-key (kbd "C-x j") 'jump-to-register)

;; Text
(setq-default show-trailing-whitespace t)
(setq-default fill-column 96)

;; Javascript
(setq js-switch-indent-offset 4)

;; Web-mode
(setq web-mode-script-padding 2)
(setq web-mode-style-padding 2)
(setq web-mode-markup-indent-offset 2)
(setq web-mode-engines-alist
      '(("go" . "\\.tpl")
      )
)

;; Autoloads
(add-to-list 'load-path "~/.emacs.d/local")

(autoload 'yang-mode "yang-mode" "Major mode for editing YANG models." t)
(autoload 'ob-restclient "ob-restclient" "Restclient in Org mode." t)
(autoload 'ob-perl6 "ob-perl6" "Perl 6 in Org mode." t)

(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))

;; easy-hugo config
(setq easy-hugo-basedir "~/git/donaldh.wtf/")
(setq easy-hugo-url "http://donaldh.wtf")

;; yasnippets
(yas-global-mode t)

;;
;; typescript
;;
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(add-hook 'typescript-mode-hook #'setup-tide-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
          #'(lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
;; enable typescript-tslint checker
(require 'flycheck)
(flycheck-add-mode 'typescript-tslint 'web-mode)

;;
;; lsp-mode
;;

(with-eval-after-load 'dap-go
  (setq dap-ui-variable-length 200)
  (dap-register-debug-template "Go Connect fedora dlv"
                               (list :type "go"
                                     :request "launch"
                                     :name "fedora dlv"
                                     :mode "remote"
                                     :program nil
                                     :host "192.168.1.115"
                                     :port "39801"
                                     :args nil
                                     :env nil
                                     :envFile nil)))

(require 'lsp-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (require 'dap-go)
            (set-fringe-style '(nil . 0))
            (lsp-deferred)))
(add-hook 'c-mode-common-hook #'lsp-deferred)
(add-hook 'java-mode-hook #'lsp-deferred)
(add-hook 'python-mode-hook (lambda () (require 'lsp-pyright) (lsp-deferred)))

(require 'ccls)
(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-tramp-connection (lambda () (cons ccls-executable ccls-args)))
  :major-modes '(c-mode c++-mode cuda-mode objc-mode)
  :server-id 'ccls-remote
  :remote? t
  :multi-root nil
  :notification-handlers
  (lsp-ht ("$ccls/publishSkippedRanges" #'ccls--publish-skipped-ranges)
          ("$ccls/publishSemanticHighlight" #'ccls--publish-semantic-highlight))
  :initialization-options (lambda () ccls-initialization-options)
  :library-folders-fn ccls-library-folders-fn))

(setq lsp-lens-enable nil)

;; (setq tramp-verbose 9)
;; (setq lsp-log-io t)

;;
;; org-mode
;;
(add-hook 'org-mode-hook
          #'(lambda ()
             (define-key org-mode-map "\M-h" nil)
             (setq org-return-follows-link t)
             ))
(define-key global-map (kbd "s-b") (lambda () (interactive) (org-capture nil "b")))
(setq org-capture-templates
      '(("b" "Bookmarks" entry
         (file+headline "~/.bookmarks.org" "Bookmarks")
         "** %(org-cliplink-capture)%?\n" :unnarrowed t)
        ("t" "Tasks" entry
         (file+headline "~/.notes.org" "Tasks")
         "** TODO %?\n  %u\n  %a")
        ))

;; Hide menu bar in TTY
(unless (display-graphic-p)
  (menu-bar-mode -1))

;; Magit
(with-eval-after-load 'magit-mode
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t))

;; Precise scrolling
(define-key global-map (kbd "A-<up>") 'scroll-up-line)
(define-key global-map (kbd "A-<down>") 'scroll-down-line)

(add-hook 'image-mode-hook 'auto-revert-mode)

;; Server
(server-start)
