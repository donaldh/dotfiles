;; -*- emacs-lisp -*-
(defvar global-minor-modes nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-browser-function 'browse-url-default-macosx-browser)
 '(c-basic-offset 4)
 '(canlock-password "cddc0659a73575278ba7e32ae9b8520ebf5162e8")
 '(column-number-mode t)
 '(connection-local-criteria-alist
   '(((:application tramp :protocol "flatpak")
      tramp-container-connection-local-default-flatpak-profile)
     ((:application tramp :machine "localhost") tramp-connection-local-darwin-ps-profile)
     ((:application tramp :machine "imac") tramp-connection-local-darwin-ps-profile)
     ((:application tramp) tramp-connection-local-default-system-profile
      tramp-connection-local-default-shell-profile)))
 '(connection-local-profile-alist
   '((tramp-container-connection-local-default-flatpak-profile
      (tramp-remote-path "/app/bin" tramp-default-remote-path "/bin" "/usr/bin" "/sbin"
                         "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin"
                         "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin"
                         "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin"
                         "/opt/local/bin"))
     (tramp-connection-local-darwin-ps-profile
      (tramp-process-attributes-ps-args "-acxww" "-o"
                                        "pid,uid,user,gid,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                        "-o" "state=abcde" "-o"
                                        "ppid,pgid,sess,tty,tpgid,minflt,majflt,time,pri,nice,vsz,rss,etime,pcpu,pmem,args")
      (tramp-process-attributes-ps-format (pid . number) (euid . number) (user . string)
                                          (egid . number) (comm . 52) (state . 5)
                                          (ppid . number) (pgrp . number) (sess . number)
                                          (ttname . string) (tpgid . number) (minflt . number)
                                          (majflt . number) (time . tramp-ps-time)
                                          (pri . number) (nice . number) (vsize . number)
                                          (rss . number) (etime . tramp-ps-time) (pcpu . number)
                                          (pmem . number) (args)))
     (tramp-connection-local-busybox-ps-profile
      (tramp-process-attributes-ps-args "-o"
                                        "pid,user,group,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                        "-o" "stat=abcde" "-o"
                                        "ppid,pgid,tty,time,nice,etime,args")
      (tramp-process-attributes-ps-format (pid . number) (user . string) (group . string)
                                          (comm . 52) (state . 5) (ppid . number)
                                          (pgrp . number) (ttname . string)
                                          (time . tramp-ps-time) (nice . number)
                                          (etime . tramp-ps-time) (args)))
     (tramp-connection-local-bsd-ps-profile
      (tramp-process-attributes-ps-args "-acxww" "-o"
                                        "pid,euid,user,egid,egroup,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                        "-o"
                                        "state,ppid,pgid,sid,tty,tpgid,minflt,majflt,time,pri,nice,vsz,rss,etimes,pcpu,pmem,args")
      (tramp-process-attributes-ps-format (pid . number) (euid . number) (user . string)
                                          (egid . number) (group . string) (comm . 52)
                                          (state . string) (ppid . number) (pgrp . number)
                                          (sess . number) (ttname . string) (tpgid . number)
                                          (minflt . number) (majflt . number)
                                          (time . tramp-ps-time) (pri . number) (nice . number)
                                          (vsize . number) (rss . number) (etime . number)
                                          (pcpu . number) (pmem . number) (args)))
     (tramp-connection-local-default-shell-profile (shell-file-name . "/bin/sh")
                                                   (shell-command-switch . "-c"))
     (tramp-connection-local-default-system-profile (path-separator . ":")
                                                    (null-device . "/dev/null"))))
 '(custom-enabled-themes '(tango-dark))
 '(default-frame-alist '((width . 120) (height . 96)))
 '(eglot-ignored-server-capabilities '(:documentOnTypeFormattingProvider))
 '(erc-fill-column 120)
 '(exec-path
   '("/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin"
     "/Applications/Emacs.app/Contents/MacOS/libexec"))
 '(footnote-body-tag-spacing 1)
 '(footnote-spaced-footnotes nil)
 '(frame-background-mode nil)
 '(fringe-mode 0 nil (fringe))
 '(help-window-select t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(lsp-enable-file-watchers nil)
 '(lsp-enable-indentation nil)
 '(lsp-enable-on-type-formatting nil)
 '(lsp-ui-sideline-show-hover 'y)
 '(mouse-wheel-scroll-amount '(1 ((shift) . hscroll) ((meta))))
 '(nxml-slash-auto-complete-flag t)
 '(org-agenda-files '("/Users/donaldh/org-roam"))
 '(org-babel-load-languages
   '((sqlite . t) (sql . t) (makefile . t) (plantuml . t) (perl . t) (perl6 . t) (python . t)
     (raku . t) (emacs-lisp . t) (C . t) (css . t) (dot . t) (java . t) (js . t)
     (restclient . t) (shell . t) (go . t) (vega . t) (kgt . t) (http . t) (rust . t)
     (gnuplot . t)))
 '(org-confirm-babel-evaluate nil)
 '(org-mobile-files '("/Users/donaldh/org-roam"))
 '(org-plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar")
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation t)
 '(org-startup-folded nil)
 '(org-support-shift-select t)
 '(package-selected-packages
   '(vterm string-inflection org-ai org-modern ipcalc protobuf-mode eglot emacsql-sqlite
           emacsql-sqlite-builtin emacsql eldoc-box mastodon slack ack-menu tramp gnuplot
           org-re-reveal helm-core helm spinner ob-rust graphviz-dot-mode org-roam-ui ob-http
           marginalia lsp-java lsp-pyright dap-mode lsp-ui ccls plantuml-mode ob-async
           org-cliplink shx lsp-mode rustic ob-go jupyter org-roam transient tablist json-mode
           cpputils-cmake cmake-mode cmake-project company flycheck cmake-ide rfc-mode f tide
           wsd-mode jq-mode yasnippet ansible diff-hl sicp raku-mode ack htmlize ox-gfm pcre2el
           visual-regexp-steroids groovy-mode pandoc-mode auctex dockerfile-mode go-mode
           restclient markdown-mode web-mode magit yaml-mode perl6-mode))
 '(safe-local-variable-values
   '((eval c-set-offset 'arglist-cont-nonempty '(c-lineup-gcc-asm-reg c-lineup-arglist))
     (eval c-set-offset 'arglist-close 0) (eval c-set-offset 'arglist-intro '++)
     (eval c-set-offset 'case-label 0) (eval c-set-offset 'statement-case-open 0)
     (eval c-set-offset 'substatement-open 0)))
 '(scroll-bar-mode nil)
 '(sentence-end-double-space nil)
 '(show-paren-mode t)
 '(split-height-threshold 60)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(visible-bell t)
 '(warning-suppress-types '((comp) (org)))
 '(wsd-style "qsd"))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:weight normal :height 120 :family "SF Mono"))))
 '(diff-hl-change ((t (:background "blue" :foreground "yellow"))))
 '(diff-hl-delete ((t (:inherit diff-removed :foreground "red" :weight bold))))
 '(diff-hl-insert ((t (:inherit diff-added :foreground "green"))))
 '(eglot-highlight-symbol-face ((t (:inherit bold :foreground "yellow"))))
 '(eglot-mode-line ((t nil)))
 '(fixed-pitch ((t (:family "SF Mono")))))

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
;(package-initialize)

;; Keys
(setq mac-command-modifier 'meta)
(setq mac-right-command-modifier 'super)
(setq mac-option-modifier nil)
(setq mac-right-option-modifier 'alt)
(global-set-key [(meta h)] 'ns-do-hide-emacs)
(global-set-key [(meta \`)] 'other-frame)
(global-set-key [wheel-left] 'ignore)
(global-set-key [wheel-right] 'ignore)
(global-set-key (kbd "C-x /") 'point-to-register)
(global-set-key (kbd "C-x j") 'jump-to-register)

;; Text
(setq-default show-trailing-whitespace t)
(setq-default fill-column 96)

;; Javascript
(setq js-switch-indent-offset 4)

;; Web-mode
(setq web-mode-script-padding 2)
(setq web-mode-style-padding 2)
(setq web-mode-markup-indent-offset 2)
(setq web-mode-engines-alist
      '(("go" . "\\.tpl")
      )
)

;; Autoloads
(add-to-list 'load-path "~/.emacs.d/local")

(autoload 'yang-mode "yang-mode" "Major mode for editing YANG models." t)
(autoload 'ob-restclient "ob-restclient" "Restclient in Org mode." t)
(autoload 'ob-perl6 "ob-perl6" "Perl 6 in Org mode." t)

(add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))

;; easy-hugo config
(setq easy-hugo-basedir "~/git/donaldh.wtf/")
(setq easy-hugo-url "http://donaldh.wtf")

;; yasnippets
(yas-global-mode t)

;;
;; typescript
;;
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(add-hook 'typescript-mode-hook #'setup-tide-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
;; enable typescript-tslint checker
(require 'flycheck)
(flycheck-add-mode 'typescript-tslint #'web-mode)

;;
;; eglot
;;
(add-hook 'go-mode-hook
          (lambda ()
            (set-fringe-style '(nil . 0))
            (eglot-ensure)))

(add-hook 'c-mode-common-hook
          (lambda ()
            (setq c-basic-offset 8)
            (setq indent-tabs-mode t)
            (setq tab-width 8)
            (eglot-ensure)))

(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '((c-mode c-ts-mode c++-mode c++-ts-mode) . ("ccls"))))

;;
;; Process List
;;
(add-hook 'process-menu-mode-hook
          (lambda ()
            (setq tabulated-list-format [("Process" 40 t)
			       ("PID"      7 t)
			       ("Status"   7 t)
			       ("Buffer"  40 t)
			       ("TTY"     12 t)
			       ("Thread"  12 t)
			       ("Command"  0 t)])))

;;
;; org-mode
;;
(add-hook 'org-mode-hook
          (lambda ()
            (require 'org-mobile)
            (setq org-directory "~/org-roam")
            (setq org-mobile-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org")
            (setq org-mobile-inbox-for-pull (concat org-directory "/inbox.org"))
            (define-key org-mode-map "\M-h" nil)
            (setq org-return-follows-link t)
            (turn-on-auto-fill)
            ))

(add-hook 'org-capture-mode-hook
          (lambda () (org-roam-db-autosync-mode t)))

(define-key global-map (kbd "s-b") (lambda () (interactive) (org-capture nil "b")))

(setq org-capture-templates
      '(("b" "Bookmarks" entry
         (file+headline "~/.bookmarks.org" "Bookmarks")
         "** %(org-cliplink-capture)%?\n" :unnarrowed t)
        ("t" "Tasks" entry
         (file+headline "~/.notes.org" "Tasks")
         "** TODO %?\n  %u\n  %a")
        ))

(setq org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "${slug}.org"
                        "#+title: ${title}\n")
         :unnarrowed t)))

(setq org-html-head-include-default-style nil)
(setq org-publish-project-alist
           '(("roam"
              :base-directory "~/org-roam/"
              :publishing-function org-html-publish-to-html
              :publishing-directory "/usr/local/var/www/roam"
              :section-numbers nil
              :with-toc nil
              :recursive t
              :html-head "<link rel=\"stylesheet\"
               href=\"/donaldh-org.css\"
               type=\"text/css\"/>")
             ("roam-resources"
              :base-directory "~/org-roam/"
              :publishing-function org-publish-attachment
              :base-extension "png\\|svg"
              :publishing-directory "/usr/local/var/www/roam")
             ("images"
              :base-directory "~/org-roam/images"
              :publishing-function org-publish-attachment
              :base-extension "png\\|svg"
              :publishing-directory "/usr/local/var/www/roam/images")
             ("css"
              :base-directory "~/org-roam/"
              :publishing-function org-publish-attachment
              :base-extension "css"
              :publishing-directory "/usr/local/var/www")
             ("website"
              :components ("css" "roam" "images" "roam-resources"))))

(with-eval-after-load 'org
  (add-to-list 'org-babel-default-header-args
               '(:eval . "never-export")))

;; Magit
(with-eval-after-load 'magit-mode
  (add-hook 'after-save-hook #'magit-after-save-refresh-status t))

;; Precise scrolling
(define-key global-map (kbd "A-<up>") #'scroll-up-line)
(define-key global-map (kbd "A-<down>") #'scroll-down-line)

;; TTY Emacs
(unless (display-graphic-p)
  ;; remove the menu bar
  (menu-bar-mode -1)
  ;; activate mouse-based scrolling
  (xterm-mouse-mode 1)
  (global-set-key (kbd "<mouse-4>") #'scroll-down-line)
  (global-set-key (kbd "<mouse-5>") #'scroll-up-line)
  )

(setq ring-bell-function 'ignore)

;; Image mode
(add-hook 'image-mode-hook #'auto-revert-mode)

;; Diff mode
(add-hook 'diff-mode-hook
          (lambda ()
            (define-key diff-mode-map "\M-h" nil)
            ))

;; SuperCollider
(add-to-list 'load-path "~/Library/Application Support/SuperCollider/downloaded-quarks/scel/el/")
(require 'sclang)
(define-key sclang-mode-map (kbd "s-.") (lambda () (interactive) (sclang-eval-expression "CmdPeriod.run")))

;; Mastodon
(setq mastodon-instance-url "https://hachyderm.io"
      mastodon-active-user "donaldh")

;; Company
(global-company-mode)

;; Server
(server-start)
